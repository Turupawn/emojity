function parseNumber()
{
    if(getCurrentToken() >= tokens.length)
        return "";
    
    returnValue = ""
    do {
        switch (toEmoji(tokens[getCurrentToken()])) {
            case '0Ô∏è‚É£':
            returnValue += "0"
            break;
            case '1Ô∏è‚É£':
            returnValue += "1"
            break;
            case '2Ô∏è‚É£':
            returnValue += "2"
            break;
            case '3Ô∏è‚É£':
            returnValue += "3"
            break;
            case '4Ô∏è‚É£':
            returnValue += "4"
            break;
            case '5Ô∏è‚É£':
            returnValue += "5"
            break;
            case '6Ô∏è‚É£':
            returnValue += "6"
            break;
            case '7Ô∏è‚É£':
            returnValue += "7"
            break;
            case '8Ô∏è‚É£':
            returnValue += "8"
            break;
            case '9Ô∏è‚É£':
            returnValue += "9"
            break;
            case 'üîü':
            returnValue += "10"
            break;
            default:
            return returnValue
        }
        nextToken()
    } while(getCurrentToken() <= tokens.length)
    return returnValue
}

function parseUint()
{
    numberBytes = parseNumber()
    regressToken()
    if(numberBytes == "8")
    {
        return "uint8"
    }else if(numberBytes == "16")
    {
        return "uint16"
    }else if(numberBytes == "32")
    {
        return "uint32"
    }else if(numberBytes == "64")
    {
        return "uint64"
    }else if(numberBytes == "128")
    {
        return "uint128"
    }else if(numberBytes == "256")
    {
        return "uint256"
    }
    return "uint256"
}

function parseParameter()
{
    let parameter = ""

    switch (toEmoji(tokens[getCurrentToken()])) {
        case '‚Ü©Ô∏è':
        return [];
        case '#Ô∏è‚É£':
            parameter = "address"
        break;
        case 'üî°':
            parameter = "string"
        break;
        case '‚òØÔ∏è':
            parameter = "bool"
        break;
        case 'üî¢':
            nextToken()
            parameter = parseUint()
        break;
        default:
        console.log("Error: invalid parameter: " + toEmoji(tokens[getCurrentToken()]))
        return;
    }

    nextToken()

    let label = toEmoji(tokens[getCurrentToken()])

    nextToken()

    returnValue = parseParameter()
    returnValue.unshift({type: parameter, label: label})
    return returnValue
}

function parseInstructions()
{
    let instructions = []
    while(getCurrentToken() < tokens.length
            && toEmoji(tokens[getCurrentToken()]) != 'üîö')
    {
        if(toEmoji(tokens[getCurrentToken()]) == '‚Ü©Ô∏è')
        {
            nextToken()
            let returnedValue = parseVariable()
            if(returnedValue != "")
                nextToken()
            else
                returnedValue = BigInt(parseNumber())
            instructions.push({name: "return", value: returnedValue})
            break;
        }else if(toEmoji(tokens[getCurrentToken()]) == 'üìë')
        {
            let topics = []
            while(toEmoji(tokens[getCurrentToken()]) == 'üìë')
            {
                nextToken()
                let variable = parseVariable()
                if(variable != "")
                {
                    topics.push(variable)
                }else
                {
                    number = BigInt(parseNumber())
                    topics.push(number)
                }
            }
            instructions.push({name: "logEvent", topics})
        } else if(toEmoji(tokens[getCurrentToken()]) == '‚ùì'){
            nextToken()
            let condition = parseVariable()
            while(toEmoji(tokens[getCurrentToken()]) == 'üèÅ'
                || toEmoji(tokens[getCurrentToken()]) == 'üõë')
            {
                nextToken()
            }
            let ifConditions = parseInstructions()
            nextToken()

            instructions.push({name: "ifStatement", condition: condition, instructions: ifConditions})
        } else if(toEmoji(tokens[getCurrentToken()]) == 'üîÑ'){
            nextToken()
            let condition = parseVariable()
            nextToken()
            nextToken()
            let instructionsLoop = parseInstructions()
            nextToken()
            instructions.push({name: "whileLoop", condition: condition, instructions: instructionsLoop})
        } else if(toEmoji(tokens[getCurrentToken()]) == 'üî¢')
        {
            nextToken()
            let label = parseVariable()
            instructions.push({name: "declareUint", label: label, type: "uint"})
        } else if(toEmoji(tokens[getCurrentToken()]) == '#Ô∏è‚É£')
        {
            nextToken()
            let label = parseVariable()
            instructions.push({name: "declareAddress", label: label, type: "address"})
        } else if(toEmoji(tokens[getCurrentToken()]) == 'üî°')
        {
            nextToken()
            let label = parseVariable()
            instructions.push({name: "declareString", label: label, type: "string"})
        }else if(toEmoji(tokens[getCurrentToken()]) == '‚òØÔ∏è')
        {
            nextToken()
            let label = parseVariable()
            instructions.push({name: "declareBool", label: label, type: "bool"})
        }else if(toEmoji(tokens[getCurrentToken()]) == 'üì°')
        {
            nextToken()
            let contractAddress = parseNumber()
            let contractAddressType = "literal"
            if(contractAddress == "")
            {
                contractAddress = [''+toEmoji(tokens[getCurrentToken()])]
                contractAddressType = "variable"
                nextToken()
            } else {
                contractAddress = BigInt(contractAddress)
            }
            nextToken()
            let selector = parseNumber()
            let selectorType = "literal"
            if(selector == "")
            {
                selector = [''+toEmoji(tokens[getCurrentToken()])]
                selectorType = "variable"
                nextToken()
            } else {
                selector = BigInt(selector)
            }
            nextToken()
            let ethValue = parseNumber()
            let ethValueType = "literal"
            if(ethValue == "")
            {
                ethValue = [''+toEmoji(tokens[getCurrentToken()])]
                ethValueType = "variable"
                nextToken()
            } else {
                ethValue = BigInt(ethValue)
            }
            nextToken()
            let gas = parseNumber()
            let gasType = "literal"
            if(gas == "")
            {
                gas = [''+toEmoji(tokens[getCurrentToken()])]
                gasType = "variable"
                nextToken()
            } else {
                gas = BigInt(gas)
            }

            let params = []
            while(toEmoji(tokens[getCurrentToken()]) == '#Ô∏è‚É£'
                    || toEmoji(tokens[getCurrentToken()]) == 'üî¢')
            {
                nextToken()
                let value = parseNumber()
                let type = "literal"
                if(value=="")
                {
                    value = parseVariable()
                    type = "variable"
                } else {
                    value = BigInt(value)
                }
                params.push({type: type, value: value})
            }

            let returnValueStorage = null;
            if(toEmoji(tokens[getCurrentToken()]) == 'üì•')
            {
                nextToken()
                returnValueStorage = [''+toEmoji(tokens[getCurrentToken()])]
                nextToken()
            }

            instructions.push({name: "externalCall",
                contractAddress: {value: contractAddress, type: contractAddressType},
                selector: {value: selector, type: selectorType},
                value: {value: ethValue, type: ethValueType},
                gas: {value: gas, type: gasType},
                params: params,
                returnValueStorage: returnValueStorage
            })
        }else if(toEmoji(tokens[getCurrentToken()]) == '‚ùå')
        {
            instructions.push({name: "revert"})
            nextToken()
        }else
        {
            let lValue = parseVariable()
            if(lValue != "")
            {
                let numberStr = parseNumber();
                let mappingPositionLiteral = null;
                if(numberStr != "")
                    mappingPositionLiteral = BigInt(numberStr);
                if(mappingPositionLiteral != null)
                    lValue.push(mappingPositionLiteral)

                nextToken()

                let rlValue = parseVariable()
                if(rlValue!="")
                {
                    let operator = ""
                    let rrValue = ""
                    if(toEmoji(tokens[getCurrentToken()]) == '‚ûñ')
                    {
                        operator = '‚ûñ'
                    } else if(toEmoji(tokens[getCurrentToken()]) == '‚ûï')
                    {
                        operator = '‚ûï'
                    } else if(toEmoji(tokens[getCurrentToken()]) == '‚úñÔ∏è')
                    {
                        operator = '‚úñÔ∏è'
                    } else if(toEmoji(tokens[getCurrentToken()]) == '‚ûó')
                    {
                        operator = '‚ûó'
                    } else if(toEmoji(tokens[getCurrentToken()]) == '‚¨ÜÔ∏è')
                    {
                        operator = '‚¨ÜÔ∏è'
                    } else if(toEmoji(tokens[getCurrentToken()]) == '‚¨áÔ∏è')
                    {
                        operator = '‚¨áÔ∏è'
                    } else if(toEmoji(tokens[getCurrentToken()]) == 'üü∞')
                    {
                        operator = 'üü∞'
                    }

                    if(operator != "") {
                        nextToken()
                        rrValue = parseVariable()
                        if(rrValue == "")
                        {
                            rrValue = BigInt(parseNumber())
                        }
                        if(rrValue === "")
                        {
                            console.log("Error: invalid rrValue while parsing operation")
                        }
                        instructions.push({name: "operation", lValue: lValue, rlValue: rlValue, operator: operator, rrValue: rrValue})
                    } else
                    {
                        instructions.push({name: "assignment", lValue: lValue, rValue: rlValue})
                    }
                } else {

                    rlValue = parseNumber()
                    if(rlValue!="")
                    {
                        instructions.push({name: "literalAssignment", lValue: lValue, rValue: BigInt(rlValue)})
                    } else {
                        console.log("Error: Could not parse instruction")
                    }
                }
            }else
            {
                nextToken()
            }
        }
    }

    return instructions
}

function parseFunction()
{
    if(getCurrentToken() >= tokens.length)
        return;
    
    functionName = getEmojiDescription(toEmoji(tokens[getCurrentToken()]))
    nextToken()
    functionName += getEmojiDescription(toEmoji(tokens[getCurrentToken()]))
    functionName = convertToFunctionName(functionName)
    nextToken()

    visibility = ""
    switch (toEmoji(tokens[getCurrentToken()])) {
        case 'üëÄ':
            visibility = "view"
        break;
        case 'üì¢':
            visibility = "nonpayable"
        break;
        default:
            console.log("Error: missing function visibility found " + toEmoji(tokens[getCurrentToken()]))
        return;
    }

    nextToken()
    parameters = parseParameter()

    nextToken()
    returnType = ""
    switch (toEmoji(tokens[getCurrentToken()])) {
        case '#Ô∏è‚É£':
            returnType = "address"
        break;
        case 'üî°':
            returnType = "string"
        break;
        case '‚òØÔ∏è':
            returnType = "bool"
        break;
        case 'üî¢':
            nextToken()
            returnType = parseUint()
        break;
        default:
        console.log("Error: invalid return type")
        return;
    }

    nextToken()

    if(toEmoji(tokens[getCurrentToken()]) != 'üèÅ')
    {
        console.log("Error: üèÅ expected, " + toEmoji(tokens[getCurrentToken()]) + ' found')
    }

    advanceToken()

    let instructions = parseInstructions()

    for(let i=0; i<instructions.length; i++)
    {
        if(instructions[i].name == "returnLiteral")
        {
            instructions[i].returnType = returnType
        }
    }

    nextToken()

    functions.push({name: functionNameConversor(functionName), parameters: parameters, returnType: returnType, visibility: visibility, instructions: instructions})

    parseFunction()
}

function parseVariable()
{
    let variableName = []
    while(getCurrentToken() < tokens.length
        && toEmoji(tokens[getCurrentToken()]) != 'üì•'
        && toEmoji(tokens[getCurrentToken()]) != '‚ûñ'
        && toEmoji(tokens[getCurrentToken()]) != '‚úñÔ∏è'
        && toEmoji(tokens[getCurrentToken()]) != '‚ûï'
        && toEmoji(tokens[getCurrentToken()]) != 'üü∞'
        && toEmoji(tokens[getCurrentToken()]) != '‚ûó'
        && toEmoji(tokens[getCurrentToken()]) != '‚¨ÜÔ∏è'
        && toEmoji(tokens[getCurrentToken()]) != '‚¨áÔ∏è'
        && toEmoji(tokens[getCurrentToken()]) != 'üõë'
        && toEmoji(tokens[getCurrentToken()]) != '0Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '1Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '2Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '3Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '4Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '5Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '6Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '7Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '8Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != '9Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != 'üìë'
        && toEmoji(tokens[getCurrentToken()]) != '#Ô∏è‚É£'
        && toEmoji(tokens[getCurrentToken()]) != 'üî°'
        && toEmoji(tokens[getCurrentToken()]) != '‚òØÔ∏è'
        && toEmoji(tokens[getCurrentToken()]) != 'üî¢'
        && toEmoji(tokens[getCurrentToken()]) != '‚ùå'
        && toEmoji(tokens[getCurrentToken()]) != 'üì°'
        )
    {
        variableName.push(toEmoji(tokens[getCurrentToken()]))
        advanceToken()
    }
    return variableName
}

function parseStateVariable()
{
    let type = ""
    let variableSize = 0;

    switch (toEmoji(tokens[getCurrentToken()])) {
        case 'üó∫Ô∏è':
            type = "mapping"
            variableSize = 32
        break
        case '#Ô∏è‚É£':
            type = "address"
            variableSize = 20
        break;
        case 'üî°':
            type = "string"
            variableSize = 32
        break;
        case '‚òØÔ∏è':
            type = "bool"
            variableSize = 1
        break;
        case 'üî¢':
            nextToken()
            type = parseUint()
            variableSize = 32
            //parameter = parseUint()
        break;
    }

    if(type == "")
    {
        return false
    }

    nextToken()

    let label = toEmoji(tokens[getCurrentToken()])

    nextToken()

    stateVariables.set(label, {type: type, position: stateVariables.size, size: variableSize, description: getEmojiDescription(label).toUpperCase()})
    return true
}

function parseConstructor() {
    if(toEmoji(tokens[getCurrentToken()]) != 'üë∑')
        return
    nextToken()
    if(toEmoji(tokens[getCurrentToken()]) != 'üèÅ')
    {
        console.log("Error: üèÅ expected in constructor")
        return
    }
    nextToken()
    constructorInstructions = parseInstructions()

    if(toEmoji(tokens[getCurrentToken()]) != 'üîö')
    {
        console.log("Error: üîö expected at the end of constructor")
        return
    }
    nextToken()
}